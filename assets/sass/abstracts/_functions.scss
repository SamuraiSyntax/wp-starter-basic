@use 'sass:math';
@use 'sass:map';
@use 'sass:string';
@use 'sass:color';

// Convertir px en rem
@function rem($size) {
  $remSize: strip-unit($size) / 16;
  @return #{$remSize}rem;
}

// Obtenir une valeur de map imbriquée en toute sécurité
@function deep-map-get($map, $keys...) {
  @each $key in $keys {
    @if not map.has-key($map, $key) {
      @warn "La clé `#{$key}` n'existe pas dans la map.";
      @return null;
    }
    $map: map.get($map, $key);
  }
  @return $map;
}

// Ajuster la luminosité d'une couleur de manière sûre
@function adjust-color-brightness($color, $amount) {
  @return color.adjust($color, $lightness: $amount);
}

// Convertir une couleur en RGB/RGBA
@function to-rgb($color, $opacity: 1) {
  @return rgba(color.red($color), color.green($color), color.blue($color), $opacity);
}

// Vérifier si une couleur est claire ou foncée
@function is-light($color) {
  $luminance: (
      color.red($color) * 0.299 + color.green($color) * 0.587 + color.blue($color) * 0.114
    ) /
    255;
  @return $luminance > 0.5;
}

// Obtenir une couleur contrastée
@function contrast-color($color) {
  @return if(is-light($color), #000000, #ffffff);
}

// Convertir une chaîne en kebab-case
@function to-kebab-case($string) {
  $result: string.to-lower-case($string);
  $result: string.replace($result, ' ', '-');
  @return $result;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function em($size, $context: 16) {
  $emSize: strip-unit($size) / strip-unit($context);
  @return #{$emSize}em;
}
